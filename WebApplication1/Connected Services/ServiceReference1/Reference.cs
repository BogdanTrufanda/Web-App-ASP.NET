//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.Interface1")]
    public interface Interface1
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Interface1/Add", ReplyAction="http://tempuri.org/Interface1/AddResponse")]
        System.Threading.Tasks.Task AddAsync(string a, string b, string c, string d, string e, string f, string g);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Interface1/Remove", ReplyAction="http://tempuri.org/Interface1/RemoveResponse")]
        System.Threading.Tasks.Task RemoveAsync(string path);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Interface1/Update", ReplyAction="http://tempuri.org/Interface1/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(string a, string b, string c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Interface1/GetColumnNames", ReplyAction="http://tempuri.org/Interface1/GetColumnNamesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetColumnNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Interface1/GetPaths", ReplyAction="http://tempuri.org/Interface1/GetPathsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetPathsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Interface1/GetAll", ReplyAction="http://tempuri.org/Interface1/GetAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/Interface1/Get", ReplyAction="http://tempuri.org/Interface1/GetResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAsync(string a);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface Interface1Channel : ServiceReference1.Interface1, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class Interface1Client : System.ServiceModel.ClientBase<ServiceReference1.Interface1>, ServiceReference1.Interface1
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public Interface1Client() : 
                base(Interface1Client.GetDefaultBinding(), Interface1Client.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBindingBT.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Interface1Client(EndpointConfiguration endpointConfiguration) : 
                base(Interface1Client.GetBindingForEndpoint(endpointConfiguration), Interface1Client.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Interface1Client(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(Interface1Client.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Interface1Client(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(Interface1Client.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Interface1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task AddAsync(string a, string b, string c, string d, string e, string f, string g)
        {
            return base.Channel.AddAsync(a, b, c, d, e, f, g);
        }
        
        public System.Threading.Tasks.Task RemoveAsync(string path)
        {
            return base.Channel.RemoveAsync(path);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(string a, string b, string c)
        {
            return base.Channel.UpdateAsync(a, b, c);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetColumnNamesAsync()
        {
            return base.Channel.GetColumnNamesAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetPathsAsync()
        {
            return base.Channel.GetPathsAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAllAsync()
        {
            return base.Channel.GetAllAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetAsync(string a)
        {
            return base.Channel.GetAsync(a);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBindingBT))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBindingBT))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8000/PC");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return Interface1Client.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBindingBT);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return Interface1Client.GetEndpointAddress(EndpointConfiguration.BasicHttpBindingBT);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBindingBT,
        }
    }
}
